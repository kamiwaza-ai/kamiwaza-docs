"use strict";(self.webpackChunkkamiwaza_docs=self.webpackChunkkamiwaza_docs||[]).push([[2015],{29137:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"current/services/apps","title":"Apps Service","description":"The App Garden service allows you to deploy and manage containerized applications within the Kamiwaza platform. It provides a simple interface for deploying web applications, databases, and other services using Docker containers.","source":"@site/sdk/current/services/apps.md","sourceDirName":"current/services","slug":"/current/services/apps","permalink":"/kamiwaza-docs/sdk/current/services/apps","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=s(74848),l=s(28453);const a={},d="Apps Service",r={},o=[{value:"Overview",id:"overview",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Available Methods",id:"available-methods",level:2},{value:"Deployment Management",id:"deployment-management",level:3},{value:"<code>deploy(template_id, name, **kwargs)</code>",id:"deploytemplate_id-name-kwargs",level:4},{value:"<code>list_deployments()</code>",id:"list_deployments",level:4},{value:"<code>get_deployment(deployment_id)</code>",id:"get_deploymentdeployment_id",level:4},{value:"<code>stop_deployment(deployment_id)</code>",id:"stop_deploymentdeployment_id",level:4},{value:"Template Management",id:"template-management",level:3},{value:"<code>list_templates()</code>",id:"list_templates",level:4},{value:"<code>search_templates(query)</code>",id:"search_templatesquery",level:4},{value:"Instance Management",id:"instance-management",level:3},{value:"<code>list_instances(deployment_id)</code>",id:"list_instancesdeployment_id",level:4},{value:"Image Management",id:"image-management",level:3},{value:"<code>pull_images(deployment_id)</code>",id:"pull_imagesdeployment_id",level:4},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Deploy a PostgreSQL Database",id:"deploy-a-postgresql-database",level:3},{value:"Deploy a Web Application",id:"deploy-a-web-application",level:3},{value:"Monitor Deployments",id:"monitor-deployments",level:3},{value:"Templates",id:"templates",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"apps-service",children:"Apps Service"})}),"\n",(0,i.jsx)(n.h1,{id:"app-garden-service",children:"App Garden Service"}),"\n",(0,i.jsx)(n.p,{children:"The App Garden service allows you to deploy and manage containerized applications within the Kamiwaza platform. It provides a simple interface for deploying web applications, databases, and other services using Docker containers."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The App Garden is designed to make it easy to deploy applications alongside your AI workloads. It supports:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Docker-based container deployment"}),"\n",(0,i.jsx)(n.li,{children:"Pre-built application templates"}),"\n",(0,i.jsx)(n.li,{children:"Environment variable configuration"}),"\n",(0,i.jsx)(n.li,{children:"Automatic port allocation and routing"}),"\n",(0,i.jsx)(n.li,{children:"Instance scaling and management"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": App Garden endpoints do not require authentication, making them accessible for quick deployments and testing."]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kamiwaza_client import KamiwazaClient\n\n# Initialize client\nclient = KamiwazaClient("http://localhost:7777/api/")\n\n# List available templates\ntemplates = client.apps.list_templates()\nfor template in templates:\n    print(f"{template.name} - {template.description}")\n\n# Deploy an application from a template\ndeployment = client.apps.deploy(\n    template_id=template.id,\n    name="my-postgres-db",\n    env_vars={"POSTGRES_PASSWORD": "mysecretpassword"}\n)\n\nprint(f"Deployed: {deployment.name}")\nprint(f"Status: {deployment.status}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,i.jsx)(n.h3,{id:"deployment-management",children:"Deployment Management"}),"\n",(0,i.jsx)(n.h4,{id:"deploytemplate_id-name-kwargs",children:(0,i.jsx)(n.code,{children:"deploy(template_id, name, **kwargs)"})}),"\n",(0,i.jsx)(n.p,{children:"Deploy a new application from a template."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"template_id"})," (UUID): The ID of the template to deploy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," (str): Name for your deployment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"min_copies"})," (int, optional): Minimum instances to maintain (default: 1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"starting_copies"})," (int, optional): Initial number of instances (default: 1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_copies"})," (int, optional): Maximum instances allowed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"env_vars"})," (dict, optional): Environment variables for the container"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"AppDeployment"})," object with deployment details"]}),"\n",(0,i.jsx)(n.h4,{id:"list_deployments",children:(0,i.jsx)(n.code,{children:"list_deployments()"})}),"\n",(0,i.jsx)(n.p,{children:"List all active application deployments."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," List of ",(0,i.jsx)(n.code,{children:"AppDeployment"})," objects"]}),"\n",(0,i.jsx)(n.h4,{id:"get_deploymentdeployment_id",children:(0,i.jsx)(n.code,{children:"get_deployment(deployment_id)"})}),"\n",(0,i.jsx)(n.p,{children:"Get details of a specific deployment."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deployment_id"})," (UUID): The deployment ID"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"AppDeployment"})," object"]}),"\n",(0,i.jsx)(n.h4,{id:"stop_deploymentdeployment_id",children:(0,i.jsx)(n.code,{children:"stop_deployment(deployment_id)"})}),"\n",(0,i.jsx)(n.p,{children:"Stop and remove a deployment."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deployment_id"})," (UUID): The deployment ID"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Success message"]}),"\n",(0,i.jsx)(n.h3,{id:"template-management",children:"Template Management"}),"\n",(0,i.jsx)(n.h4,{id:"list_templates",children:(0,i.jsx)(n.code,{children:"list_templates()"})}),"\n",(0,i.jsx)(n.p,{children:"List all available application templates."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," List of ",(0,i.jsx)(n.code,{children:"AppTemplate"})," objects"]}),"\n",(0,i.jsx)(n.h4,{id:"search_templatesquery",children:(0,i.jsx)(n.code,{children:"search_templates(query)"})}),"\n",(0,i.jsx)(n.p,{children:"Search for templates by name or description."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"query"})," (str): Search term"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," List of matching ",(0,i.jsx)(n.code,{children:"AppTemplate"})," objects"]}),"\n",(0,i.jsx)(n.h3,{id:"instance-management",children:"Instance Management"}),"\n",(0,i.jsx)(n.h4,{id:"list_instancesdeployment_id",children:(0,i.jsx)(n.code,{children:"list_instances(deployment_id)"})}),"\n",(0,i.jsx)(n.p,{children:"List all running instances of a deployment."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deployment_id"})," (UUID): The deployment ID"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," List of ",(0,i.jsx)(n.code,{children:"AppInstance"})," objects with host and port information"]}),"\n",(0,i.jsx)(n.h3,{id:"image-management",children:"Image Management"}),"\n",(0,i.jsx)(n.h4,{id:"pull_imagesdeployment_id",children:(0,i.jsx)(n.code,{children:"pull_images(deployment_id)"})}),"\n",(0,i.jsx)(n.p,{children:"Pull Docker images for a deployment (useful for pre-loading)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deployment_id"})," (UUID): The deployment ID"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"ImagePullResult"})," with status information"]}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"deploy-a-postgresql-database",children:"Deploy a PostgreSQL Database"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Find PostgreSQL template\ntemplates = client.apps.search_templates("postgres")\npostgres_template = templates[0]\n\n# Deploy with custom settings\ndeployment = client.apps.deploy(\n    template_id=postgres_template.id,\n    name="my-database",\n    env_vars={\n        "POSTGRES_PASSWORD": "secure_password",\n        "POSTGRES_DB": "myapp"\n    }\n)\n\n# Get connection details\ninstances = client.apps.list_instances(deployment.id)\nfor instance in instances:\n    print(f"Connect to: {instance.host_name}:{instance.listen_port}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deploy-a-web-application",children:"Deploy a Web Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Deploy a web app with scaling\ndeployment = client.apps.deploy(\n    template_id=web_template.id,\n    name="my-web-app",\n    min_copies=2,\n    max_copies=5,\n    env_vars={\n        "API_KEY": "your_api_key",\n        "DEBUG": "false"\n    }\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"monitor-deployments",children:"Monitor Deployments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# List all deployments\ndeployments = client.apps.list_deployments()\n\nfor deployment in deployments:\n    print(f"\\n{deployment.name}:")\n    print(f"  Status: {deployment.status}")\n    print(f"  Created: {deployment.created_at}")\n    \n    # Check instances\n    instances = client.apps.list_instances(deployment.id)\n    print(f"  Running instances: {len(instances)}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"templates",children:"Templates"}),"\n",(0,i.jsx)(n.p,{children:"Templates define the container configuration and requirements for applications. Each template includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Docker image reference"}),"\n",(0,i.jsx)(n.li,{children:"Default environment variables"}),"\n",(0,i.jsx)(n.li,{children:"Port configurations"}),"\n",(0,i.jsx)(n.li,{children:"Resource requirements"}),"\n",(0,i.jsx)(n.li,{children:"Risk tier classification"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Templates are verified by the Kamiwaza team and categorized by risk level for security."}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    deployment = client.apps.deploy(\n        template_id=template_id,\n        name="my-app"\n    )\nexcept Exception as e:\n    print(f"Deployment failed: {e}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Templates"}),": Prefer templates over custom images for better security and reliability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Environment Variables"}),": Store sensitive data like passwords in environment variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scaling"}),": Set appropriate min/max copies based on your load requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring"}),": Regularly check deployment status and instance health"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleanup"}),": Stop unused deployments to free resources"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../../examples/08_app_garden_and_tools.ipynb",children:"Example Notebook"})," - Complete examples of App Garden usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../tools/README.md",children:"Tool Service"})," - Deploy MCP Tool servers"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var t=s(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);