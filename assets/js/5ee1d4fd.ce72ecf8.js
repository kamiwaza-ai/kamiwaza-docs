"use strict";(self.webpackChunkkamiwaza_docs=self.webpackChunkkamiwaza_docs||[]).push([[4733],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var i=r(96540);const s={},t=i.createContext(s);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},86028:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"sdk/services/retrieval/README","title":"Retrieval Service","description":"Overview","source":"@site/versioned_docs/version-0.3.2/sdk/services/retrieval/README.md","sourceDirName":"sdk/services/retrieval","slug":"/sdk/services/retrieval/","permalink":"/kamiwaza-docs/0.3.2/sdk/services/retrieval/","draft":false,"unlisted":false,"tags":[],"version":"0.3.2","frontMatter":{}}');var s=r(74848),t=r(28453);const c={},l="Retrieval Service",a={},o=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Text Chunk Retrieval",id:"text-chunk-retrieval",level:2},{value:"Available Methods",id:"available-methods",level:3},{value:"Integration with Other Services",id:"integration-with-other-services",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"retrieval-service",children:"Retrieval Service"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Retrieval Service (",(0,s.jsx)(n.code,{children:"RetrievalService"}),") provides text chunk retrieval functionality for the Kamiwaza AI Platform. Located in ",(0,s.jsx)(n.code,{children:"kamiwaza_client/services/retrieval.py"}),", this service handles the retrieval of relevant text chunks based on queries, enabling efficient information retrieval."]}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Relevant Text Chunk Retrieval"}),"\n",(0,s.jsx)(n.li,{children:"Query-based Search"}),"\n",(0,s.jsx)(n.li,{children:"Integration with Vector Database"}),"\n",(0,s.jsx)(n.li,{children:"Semantic Search Capabilities"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"text-chunk-retrieval",children:"Text Chunk Retrieval"}),"\n",(0,s.jsx)(n.h3,{id:"available-methods",children:"Available Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"retrieve_relevant_chunks(query: str, k: int = 5) -> List[TextChunk]"}),": Get relevant text chunks based on query"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Retrieve relevant chunks\nchunks = client.retrieval.retrieve_relevant_chunks(\n    query="What is machine learning?",\n    k=5  # Number of chunks to retrieve\n)\n\n# Process retrieved chunks\nfor chunk in chunks:\n    print(f"Text: {chunk.text}")\n    print(f"Score: {chunk.score}")\n    print(f"Source: {chunk.metadata.get(\'source\')}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-other-services",children:"Integration with Other Services"}),"\n",(0,s.jsx)(n.p,{children:"The Retrieval Service works in conjunction with:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Embedding Service","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For converting queries into vector representations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["VectorDB Service","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For performing similarity search"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Ingestion Service","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For accessing processed and stored text chunks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"The service includes built-in error handling for common scenarios:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'try:\n    chunks = client.retrieval.retrieve_relevant_chunks(\n        query="example query"\n    )\nexcept VectorDBError:\n    print("Vector database error")\nexcept EmbeddingError:\n    print("Embedding generation error")\nexcept APIError as e:\n    print(f"Operation failed: {e}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Use specific and focused queries"}),"\n",(0,s.jsx)(n.li,{children:"Adjust the number of chunks (k) based on your needs"}),"\n",(0,s.jsx)(n.li,{children:"Consider chunk relevance scores"}),"\n",(0,s.jsx)(n.li,{children:"Process chunks in order of relevance"}),"\n",(0,s.jsx)(n.li,{children:"Handle empty result sets appropriately"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper error handling"}),"\n",(0,s.jsx)(n.li,{children:"Consider caching frequently retrieved chunks"}),"\n",(0,s.jsx)(n.li,{children:"Monitor retrieval performance"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query length affects retrieval time"}),"\n",(0,s.jsx)(n.li,{children:"Number of chunks (k) impacts response time"}),"\n",(0,s.jsx)(n.li,{children:"Vector database size influences search speed"}),"\n",(0,s.jsx)(n.li,{children:"Embedding generation adds processing overhead"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);